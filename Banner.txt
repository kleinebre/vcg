Banner prints a text in big lettering.
The implementation this was ported from has an
8x7 pixel font, and the size of the pixels can
be set from the program.

The program appears to assume that the banner is
printed on a line printer that takes continuous
tractor feed paper. So charming! I suppose you
could also send this output to a laser printer
and stick together the pages with sticky tape,
but it just doesn't have the same nostalgic feel
to it.

One difference between this implementation and
the original program is that the origianl program
reads the letter data over and over again. That's
not very efficient, so this may go some way to explain
the somewhat odd ordering of the font data definitions:
letters that are frequently used in English such as
vowels and the letter T appear close to the top of
the list, while numbers and special characters
appear much further down.

In our Python implementation, the font data is stored
in a dictionary, so not only doesn't it need to be
transferred to a number array over and over again,
getting the font data for the right letter is a matter
of doing a fast lookup. While the font data still
appears in the same order as in the original BASIC
implementation, but this no longer has a significant
impact on the time it takes to generate the banner.
